Magesh Kuppan

Methodology
    No powerpoint

Schedule
    Commence    : 09:30
    Tea break   : 11:00 (20 mins)
    Lunch Break : 13:00 (1 hour)
    Tea break   : 15:30 (20 mins)
    Wind up     : 17:30 

About You:
    1. Name
    2. Total Experience
    3. Primary Skillset
    4. Experience in Golang (if any)


Why Go?
    1. Concurrency
        Built for concurrency
        language features
            go, select & range, chan, <-

    2. Simplicity
        ONLY 25 keywords
        go, type, package, import, func, main, var, const, if, else, switch, case, break, continue, for, make, new, close, chan, select, return
        1. No access modifiers (public private etc)
        2. No classes (only structs & functions)
        3. No inheritance (only composition)
        4. No exceptions (only errors)
        5. Everything is passed by value by default (use pointers to pass by reference)
        6. No Pointer arithmetic

    3. Efficiency & Performance



Paradox of Choice
    Barry Schwartz
    

var t = new System.Threading.Thread<>()
t.start()

func fn(){

}

statement-1
go fn()
statement-2

Hello World
    go run hello-world.go 
    go build hello-world.go 
    go build -o <binary name> hello-world.go

Data types
    bool
    string

    int
    int8
    int16
    int32
    int64

    uint
    uint8
    uint16
    uint32
    uint64

    float32
    float64

    complex64 (real float32, imaginary float32)
    complex128 (real float64, imaginary float64)

    byte (alias for uint8)
    rune (alias for int32) (represent a unicode code point)


Assignment
Build an interactive calculator
Display the following menu when application starts
    1. Add
    2. Subtract
    3. Multiply
    4. Divide
    5. Exit

    if the user chooses 5, exit the application
    if the user chooses any other option, display the menu again
    if the user chooses 1-4
        Accept two numbers from the user
        Perform the operation on the two numbers
        Display the result
        Display the menu

Functions
    1. variadic functions
    2. Higher order functions
        functions can be assigned to variables
        functions can be passed as arguments to other functions
        functions can be returned as returned as result
    3. Closures
    4. Deferred functions
    5. Panic & Recovery

Day-02
Collections
    1. Array
        collection of value of the same type
        fixed size
        indexing starts from 0
        len func returns the size of the array

    2. Slice
        similar to an array but of varying size
        use 'append' func to add new items to the slice
        use 'make' func to proactively allocate memory to the underlying array

    3. Map
        collection of key-value pairs
        key & value must be typed
        use 'make' func to proactively allocate memory to the underlying array
        use 'delete' func to remove a key-value pair


Modularity
    1. Modules 
    2. Packages


    Before 1.13
        All the application code has to be maintained in the following folder structure
            $GOPATH
                /bin
                /pkg
                /src
                    /github.com
                        /<username>
                            /<project-name>

    After 1.13
        Modules are now stored in the following folder structure
        go.mod -> module file
            go mod init <module-name> => to create the module

        organize the code into packages
            a package is just a folder

        To install a package
            go get <package-name>

        to update the dependent packages with the latest version
            go get -u <package-name>
            OR
            go get -u

            go mod tidy

            
Interfaces
    Abstractions
        
